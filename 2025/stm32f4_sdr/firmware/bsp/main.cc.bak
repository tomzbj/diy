#include "gd32f4xx.h"
#include <stdio.h>
#include "misc.h"

uint32_t adc_value[6];

static void dma_config(void)
{
  dma_single_data_parameter_struct dma_single_data_parameter;

  dma_deinit(DMA1, DMA_CH0);

  dma_single_data_parameter.periph_addr = (uint32_t)(&ADC_SYNCDATA);
  dma_single_data_parameter.periph_inc = DMA_PERIPH_INCREASE_DISABLE;
  dma_single_data_parameter.memory0_addr = (uint32_t)(adc_value);
  dma_single_data_parameter.memory_inc = DMA_MEMORY_INCREASE_ENABLE;
  dma_single_data_parameter.periph_memory_width = DMA_PERIPH_WIDTH_16BIT;
  dma_single_data_parameter.circular_mode = DMA_CIRCULAR_MODE_ENABLE;
  dma_single_data_parameter.direction = DMA_PERIPH_TO_MEMORY;
  dma_single_data_parameter.number = 6;
  dma_single_data_parameter.priority = DMA_PRIORITY_HIGH;
  dma_single_data_mode_init(DMA1, DMA_CH0, &dma_single_data_parameter);
  dma_channel_subperipheral_select(DMA1, DMA_CH0, DMA_SUBPERI0);

//  dma_channel_enable(DMA1, DMA_CH0);
}

static void adc_config(void)
{
  adc_sync_mode_config (ADC_ALL_ROUTINE_PARALLEL);
//  adc_sync_mode_config (ADC_ALL_ROUTINE_FOLLOW_UP);
  adc_sync_dma_config (ADC_SYNC_DMA_MODE0);
  adc_sync_dma_request_after_last_enable();
  adc_data_alignment_config(ADC0, ADC_DATAALIGN_RIGHT);
  adc_data_alignment_config(ADC1, ADC_DATAALIGN_RIGHT);
  adc_data_alignment_config(ADC2, ADC_DATAALIGN_RIGHT);
  adc_special_function_config(ADC0, ADC_SCAN_MODE, ENABLE);
  adc_special_function_config(ADC1, ADC_SCAN_MODE, ENABLE);
  adc_special_function_config(ADC2, ADC_SCAN_MODE, ENABLE);

  adc_channel_length_config(ADC0, ADC_ROUTINE_CHANNEL, 2);
  adc_channel_length_config(ADC1, ADC_ROUTINE_CHANNEL, 2);
  adc_channel_length_config(ADC2, ADC_ROUTINE_CHANNEL, 2);
  adc_routine_channel_config(ADC0, 0, ADC_CHANNEL_4, ADC_SAMPLETIME_15);
  adc_routine_channel_config(ADC0, 1, ADC_CHANNEL_4, ADC_SAMPLETIME_15);
//  adc_routine_channel_config(ADC0, 1, ADC_CHANNEL_3, ADC_SAMPLETIME_15);
  adc_routine_channel_config(ADC1, 0, ADC_CHANNEL_5, ADC_SAMPLETIME_15);
  adc_routine_channel_config(ADC1, 1, ADC_CHANNEL_5, ADC_SAMPLETIME_15);
//  adc_routine_channel_config(ADC1, 1, ADC_CHANNEL_4, ADC_SAMPLETIME_15);
  adc_routine_channel_config(ADC2, 0, ADC_CHANNEL_0, ADC_SAMPLETIME_15);
  adc_routine_channel_config(ADC2, 1, ADC_CHANNEL_0, ADC_SAMPLETIME_15);
//  adc_routine_channel_config(ADC2, 1, ADC_CHANNEL_5, ADC_SAMPLETIME_15);
//  adc_external_trigger_config(ADC0, ADC_ROUTINE_CHANNEL, EXTERNAL_TRIGGER_RISING);
  adc_external_trigger_config(ADC0, ADC_ROUTINE_CHANNEL, EXTERNAL_TRIGGER_DISABLE);
  adc_external_trigger_config(ADC1, ADC_ROUTINE_CHANNEL, EXTERNAL_TRIGGER_DISABLE);
  adc_external_trigger_config(ADC2, ADC_ROUTINE_CHANNEL, EXTERNAL_TRIGGER_DISABLE);
  adc_external_trigger_source_config(ADC0, ADC_ROUTINE_CHANNEL,
    ADC_EXTTRIG_ROUTINE_T1_TRGO);

  /*  adc_enable (ADC0);
   _delay_ms(1);
   adc_calibration_enable(ADC0);
   adc_enable (ADC1);
   _delay_ms(1);
   adc_calibration_enable(ADC1);
   adc_enable (ADC2);
   _delay_ms(1);
   adc_calibration_enable(ADC2);
   */
}

int test_main(void)
{
  dma_config();
  adc_config();
  return 0;

  while(1) {
    _delay_ms(1000);
    printf("ADC0: PA0, adc_value[0] = %04lX \n", adc_value[0]);
    printf("ADC1: PA1, adc_value[1] = %04lX \n", adc_value[1]);
    printf("ADC2: PA2, adc_value[2] = %04lX \n", adc_value[2]);
    printf("ADC0: PA3, adc_value[3] = %04lX \n", adc_value[3]);
    printf("ADC1: PA4, adc_value[4] = %04lX \n", adc_value[4]);
    printf("ADC2: PF7, adc_value[5] = %04lX \n", adc_value[5]);
    printf("******************* \n");
  }
}

